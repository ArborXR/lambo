<?php

namespace App\Actions;

use Carbon\Carbon;
use Illuminate\Support\Facades\File;
use Illuminate\Support\Str;

class UpgradeSavedConfiguration
{
   private $removedConfigurationKeys = [
        'NODE',
        'MIX',
        'AUTH',
        'FRONTEND',
    ];

    private $newConfiguration = [
        'THING' => [
            'commented' => true,
            'default' => 'flibble',
            'description' => [
                '# The THING parameter enables Lambo to do a thing.',
                '# Valid options are foo, bar and flibble (default if not specified).',
            ]
        ],
        'ANOTHER_THING' => [
            'commented' => false,
            'default' => 'false',
            'description' => [
                '# The ANOTHER_THING parameter enables Lambo to do a another thing.',
                '# Valid options are true or false (default if not specified).',
            ]
        ],
    ];

    private $commented = [];

    public function __invoke()
    {
        $configDir = config('home_dir') . '/.lambo';
        $configFilePath = $configDir . "/config";

        if (! File::isDirectory($configDir)) {
            return;
        }

        if (! File::isFile($configFilePath)) {
            return;
        }

        $savedConfiguration = File::get($configFilePath);
        File::move($configFilePath, $configFilePath . '.' . Carbon::now()->format('Ymdhis'));
        File::put($configFilePath, $this->upgrade($savedConfiguration, $this->removedConfigurationKeys, $this->newConfiguration));
    }

    public function upgrade(string $savedConfiguration, array $oldConfigurationKeys, array $newConfiguration = []): string
    {
        $commentedConfiguration = collect(explode("\n", $savedConfiguration))->transform(function ($item) use ($oldConfigurationKeys) {
            $matched = collect($oldConfigurationKeys)->reduce(function ($carry, $oldKey) use ($item) {
                return $carry || Str::of($item)->startsWith($oldKey);
            }, false);
            if ($matched) {
                $this->commented[] = $item;
                return "#{$item}";
            }
            return $item;
        })->implode("\n");

        return "{$commentedConfiguration}\n{$this->summarizeComments()}#\n{$this->addNewConfiguration($newConfiguration)}";
    }

    private function summarizeComments()
    {
        $dateTime = Carbon::now()->format('j-M-Y g:i a');
        $lines = [
            '# ------------------------------------------------------------------------------',
            "# {$dateTime} (auto-generated by Lambo):",
            '# ------------------------------------------------------------------------------',
            '# Lambo has commented out the following configuration items as they are no',
            '# longer used, you may safely remove them:',
            $this->formatCommented()
        ];

        return implode(PHP_EOL, $lines);
    }

    private function formatCommented(): string
    {
        return collect($this->commented)->reduce(function ($carry, $item) {
            return "$carry#   {$item}\n";
        },'');
    }

    private function addNewConfiguration(array $newConfiguration): string
    {
        if (! count($newConfiguration) > 0) {
            return '';
        }

        return collect(array_keys($newConfiguration))->reduce(function ($carry, $key) use ($newConfiguration) {
            $description = collect($newConfiguration[$key]['description'])->reduce(function ($carry, $item) {
                return "$carry{$item}\n";
            }, '');

            $configurationItem = sprintf(
                "%s%s=%s\n\n",
                $newConfiguration[$key]['commented'] ? '#' : '',
                $key,
                $newConfiguration[$key]['default']
            );

            return "{$carry}{$description}{$configurationItem}";
            //return $carry . $description;
        }, "# Lambo has introduced new configuration options. They have been added here\n# with sensible defaults, however, you should review them.\n#\n");
    }
}
